import tkinter as tk
from tkinter import ttk, messagebox, scrolledtext
import matplotlib.pyplot as plt
from matplotlib.backends.backend_tkagg import FigureCanvasTkAgg, NavigationToolbar2Tk
import numpy as np
import sympy as sp
from sympy import symbols, lambdify, integrate, sympify, latex
from PIL import Image, ImageTk
import webbrowser
import re

class IntegralMasterPro:
    def __init__(self, root):
        self.root = root
        self.root.title("El Yamiyecto")
        self.root.geometry("1200x800")
        self.root.minsize(1000, 700)
        self.root.configure(bg="#2c3e50")
        
        # Variables para la integral
        self.integral_parts = {
            'function': '',
            'variable': 'x',
            'lower_limit': '',
            'upper_limit': ''
        }
        
        # Elementos disponibles para arrastrar
        self.available_elements = {
            'funciones': ['x', 'x^2', 'x^3', '‚àöx', 'sin(x)', 'cos(x)', 'tan(x)', 'e^x', 'ln(x)', '1/x', '|x|'],
            'operaciones': ['+', '-', '√ó', '√∑', '(', ')', '^'],
            'constantes': ['0', '1', '2', '3', 'œÄ', 'e', '-1', '-2', '-œÄ'],
            'limites': ['0', '1', '2', '3', 'œÄ', '2œÄ', 'e', '-1', '-œÄ']
        }
        
        # Configurar estilo
        self.setup_styles()
        
        # Crear interfaz
        self.setup_ui()
        
        # Variables de tema
        self.dark_mode = True
        self.graph_style = "default"
        
    def setup_styles(self):
        self.style = ttk.Style()
        self.style.theme_use('clam')
        
        # Configurar colores para modo oscuro
        self.style.configure('.', background="#2c3e50", foreground="#ecf0f1")
        self.style.configure('TFrame', background="#2c3e50")
        self.style.configure('TLabel', background="#2c3e50", foreground="#ecf0f1")
        self.style.configure('TButton', background="#3498db", foreground="#2c3e50", 
                            font=('Arial', 10, 'bold'), borderwidth=1)
        self.style.map('TButton', background=[('active', '#2980b9')])
        self.style.configure('TLabelframe', background="#34495e", foreground="#ecf0f1")
        self.style.configure('TLabelframe.Label', background="#34495e", foreground="#ecf0f1")
        self.style.configure('TEntry', fieldbackground="#ecf0f1", foreground="#2c3e50")
        self.style.configure('TCombobox', fieldbackground="#ecf0f1", foreground="#2c3e50")
        
        # Estilo para botones de funciones
        self.style.configure('Func.TButton', background="#9b59b6", font=('Arial', 9, 'bold'))
        self.style.map('Func.TButton', background=[('active', '#8e44ad')])
        
        # Estilo para botones de operaciones
        self.style.configure('Op.TButton', background="#2ecc71", font=('Arial', 10, 'bold'))
        self.style.map('Op.TButton', background=[('active', '#27ae60')])
        
        # Estilo para botones de constantes
        self.style.configure('Const.TButton', background="#e67e22", font=('Arial', 9, 'bold'))
        self.style.map('Const.TButton', background=[('active', '#d35400')])
        
        # Estilo para botones de l√≠mites
        self.style.configure('Limit.TButton', background="#e74c3c", font=('Arial', 8, 'bold'))
        self.style.map('Limit.TButton', background=[('active', '#c0392b')])
        
        # Estilo para botones especiales
        self.style.configure('Special.TButton', background="#1abc9c", font=('Arial', 9, 'bold'))
        self.style.map('Special.TButton', background=[('active', '#16a085')])
        
    def setup_ui(self):
        # Crear paneles principales
        main_panel = ttk.PanedWindow(self.root, orient=tk.HORIZONTAL)
        main_panel.pack(fill=tk.BOTH, expand=True, padx=10, pady=10)
        
        # Panel izquierdo (controles)
        control_frame = ttk.Frame(main_panel, padding=10)
        main_panel.add(control_frame, weight=1)
        
        # Panel derecho (gr√°fico y resultados)
        result_frame = ttk.Frame(main_panel, padding=10)
        main_panel.add(result_frame, weight=2)
        
        # ========== PANEL DE CONTROL ==========
        # Logo y t√≠tulo
        logo_frame = ttk.Frame(control_frame)
        logo_frame.pack(fill=tk.X, pady=(0, 15))
        
        # Logo simulado (en lugar de cargar una imagen)
        logo_label = ttk.Label(logo_frame, text="‚à´", font=('Arial', 36, 'bold'), 
                              foreground="#3498db", background="#2c3e50")
        logo_label.pack(side=tk.LEFT, padx=5)
        
        title_frame = ttk.Frame(logo_frame)
        title_frame.pack(side=tk.LEFT, fill=tk.X, expand=True)
        
        ttk.Label(title_frame, text="IntegralMaster Pro 3000 UPV ", font=('Arial', 16, 'bold')).pack(anchor=tk.W)
        ttk.Label(title_frame, text="Constructor y Visualizador de Integrales", 
                 font=('Arial', 10)).pack(anchor=tk.W)
        
        # Barra de herramientas
        toolbar = ttk.Frame(control_frame)
        toolbar.pack(fill=tk.X, pady=(0, 15))
        
        ttk.Button(toolbar, text="üìö Ejemplos", command=self.show_examples, 
                  style='Special.TButton').pack(side=tk.LEFT, padx=2)
        ttk.Button(toolbar, text="üìã Historial", command=self.show_history, 
                  style='Special.TButton').pack(side=tk.LEFT, padx=2)
        ttk.Button(toolbar, text="üåô Tema", command=self.toggle_theme, 
                  style='Special.TButton').pack(side=tk.LEFT, padx=2)
        ttk.Button(toolbar, text="‚ùì Ayuda", command=self.show_help, 
                  style='Special.TButton').pack(side=tk.LEFT, padx=2)
        
        # Constructor de integrales
        integral_frame = ttk.LabelFrame(control_frame, text="Constructor de Integrales", padding=10)
        integral_frame.pack(fill=tk.X, pady=(0, 15))
        
        # Display de la integral
        self.integral_display = ttk.Label(integral_frame, text="‚à´ dx", 
                                         font=('Cambria Math', 24), background="#34495e")
        self.integral_display.pack(pady=(5, 15))
        
        # Entradas para la integral
        input_frame = ttk.Frame(integral_frame)
        input_frame.pack(fill=tk.X, pady=(0, 10))
        
        # L√≠mite superior
        ttk.Label(input_frame, text="L√≠mite Superior:").grid(row=0, column=0, sticky=tk.W, padx=(0, 5))
        self.upper_limit_var = tk.StringVar()
        self.upper_limit_entry = ttk.Entry(input_frame, textvariable=self.upper_limit_var, width=10)
        self.upper_limit_entry.grid(row=0, column=1, padx=(0, 15))
        
        # L√≠mite inferior
        ttk.Label(input_frame, text="L√≠mite Inferior:").grid(row=0, column=2, sticky=tk.W, padx=(0, 5))
        self.lower_limit_var = tk.StringVar()
        self.lower_limit_entry = ttk.Entry(input_frame, textvariable=self.lower_limit_var, width=10)
        self.lower_limit_entry.grid(row=0, column=3)
        
        # Funci√≥n
        ttk.Label(integral_frame, text="Funci√≥n f(x):").pack(anchor=tk.W, pady=(10, 5))
        self.function_var = tk.StringVar()
        self.function_var.trace_add('write', self.update_integral_display)
        self.function_entry = ttk.Entry(integral_frame, textvariable=self.function_var, width=30)
        self.function_entry.pack(fill=tk.X)
        
        # Botones de l√≠mites r√°pidos
        limits_frame = ttk.Frame(integral_frame)
        limits_frame.pack(fill=tk.X, pady=(10, 5))
        
        ttk.Label(limits_frame, text="L√≠mites r√°pidos:").pack(side=tk.LEFT)
        for limit in self.available_elements['limites']:
            btn = ttk.Button(limits_frame, text=limit, width=4, style='Limit.TButton',
                           command=lambda l=limit: self.set_limit(l))
            btn.pack(side=tk.LEFT, padx=2)
        
        # Elementos disponibles
        elements_frame = ttk.LabelFrame(control_frame, text="Elementos Disponibles", padding=10)
        elements_frame.pack(fill=tk.X, pady=(0, 15))
        
        # Funciones
        ttk.Label(elements_frame, text="Funciones:", font=('Arial', 9, 'bold')).pack(anchor=tk.W, pady=(0, 5))
        functions_frame = ttk.Frame(elements_frame)
        functions_frame.pack(fill=tk.X, pady=(0, 10))
        
        for func in self.available_elements['funciones']:
            btn = ttk.Button(functions_frame, text=func, style='Func.TButton',
                           command=lambda f=func: self.add_to_function(f))
            btn.pack(side=tk.LEFT, padx=2, pady=2)
        
        # Operaciones
        ttk.Label(elements_frame, text="Operaciones:", font=('Arial', 9, 'bold')).pack(anchor=tk.W, pady=(0, 5))
        operations_frame = ttk.Frame(elements_frame)
        operations_frame.pack(fill=tk.X, pady=(0, 10))
        
        for op in self.available_elements['operaciones']:
            btn = ttk.Button(operations_frame, text=op, width=3, style='Op.TButton',
                           command=lambda o=op: self.add_to_function(o))
            btn.pack(side=tk.LEFT, padx=2, pady=2)
        
        # Constantes
        ttk.Label(elements_frame, text="Constantes:", font=('Arial', 9, 'bold')).pack(anchor=tk.W, pady=(0, 5))
        constants_frame = ttk.Frame(elements_frame)
        constants_frame.pack(fill=tk.X)
        
        for const in self.available_elements['constantes']:
            btn = ttk.Button(constants_frame, text=const, style='Const.TButton',
                           command=lambda c=const: self.add_to_function(c))
            btn.pack(side=tk.LEFT, padx=2, pady=2)
        
        # Botones de control
        control_buttons = ttk.Frame(control_frame)
        control_buttons.pack(fill=tk.X, pady=(10, 0))
        
        ttk.Button(control_buttons, text="üßπ Limpiar Todo", 
                  command=self.clear_all, style='Special.TButton').pack(side=tk.LEFT, padx=5)
        ttk.Button(control_buttons, text="üî¢ Calcular", 
                  command=self.calculate_and_plot, style='TButton').pack(side=tk.RIGHT, padx=5)
        
        # ========== PANEL DE RESULTADOS ==========
        # Pesta√±as para gr√°fico e informaci√≥n
        self.notebook = ttk.Notebook(result_frame)
        self.notebook.pack(fill=tk.BOTH, expand=True)
        
        # Pesta√±a de Gr√°fico
        graph_tab = ttk.Frame(self.notebook)
        self.notebook.add(graph_tab, text="Gr√°fico")
        
        # Frame para el gr√°fico
        graph_container = ttk.Frame(graph_tab)
        graph_container.pack(fill=tk.BOTH, expand=True, padx=5, pady=5)
        
        # Crear figura de matplotlib
        plt.style.use('dark_background')
        self.fig, self.ax = plt.subplots(figsize=(8, 5), facecolor="#2c3e50")
        self.fig.set_facecolor("#2c3e50")
        self.ax.set_facecolor("#34495e")
        self.canvas = FigureCanvasTkAgg(self.fig, graph_container)
        self.canvas.get_tk_widget().pack(fill=tk.BOTH, expand=True, padx=5, pady=5)
        
        # Barra de herramientas de matplotlib
        self.toolbar = NavigationToolbar2Tk(self.canvas, graph_container)
        self.toolbar.update()
        self.toolbar.pack(side=tk.BOTTOM, fill=tk.X)
        
        # Pesta√±a de Resultados
        results_tab = ttk.Frame(self.notebook)
        self.notebook.add(results_tab, text="Resultados")
        
        # √Årea de texto para resultados
        self.result_text = scrolledtext.ScrolledText(results_tab, wrap=tk.WORD, 
                                                   font=('Consolas', 11), 
                                                   bg="#34495e", fg="#ecf0f1")
        self.result_text.pack(fill=tk.BOTH, expand=True, padx=5, pady=5)
        self.result_text.insert(tk.END, "Aqu√≠ se mostrar√°n los resultados detallados...")
        self.result_text.config(state=tk.DISABLED)
        
        # Pesta√±a de Historial
        self.history_tab = ttk.Frame(self.notebook)
        self.notebook.add(self.history_tab, text="Historial", state=tk.HIDDEN)
        
        # Barra de estado
        self.status_var = tk.StringVar()
        self.status_var.set("Listo")
        status_bar = ttk.Label(self.root, textvariable=self.status_var, 
                              relief=tk.SUNKEN, anchor=tk.W)
        status_bar.pack(side=tk.BOTTOM, fill=tk.X)
        
        # Historial de c√°lculos
        self.history = []
        
        # Configurar eventos
        self.function_entry.bind("<Return>", lambda e: self.calculate_and_plot())
        self.upper_limit_entry.bind("<Return>", lambda e: self.calculate_and_plot())
        self.lower_limit_entry.bind("<Return>", lambda e: self.calculate_and_plot())
        
    def add_to_function(self, element):
        current = self.function_var.get()
        # Convertir s√≠mbolos matem√°ticos a formato Python
        element = element.replace('^', '**').replace('√ó', '*').replace('√∑', '/').replace('‚àö', 'sqrt')
        self.function_var.set(current + element)
        
    def update_integral_display(self, *args):
        """Actualiza la visualizaci√≥n de la integral con formato matem√°tico"""
        func = self.function_var.get()
        lower = self.lower_limit_var.get() or "a"
        upper = self.upper_limit_var.get() or "b"
        
        # Formatear la funci√≥n para visualizaci√≥n
        func_display = func.replace('**', '^').replace('*', '')
        display_text = f"‚à´  {func_display}  dx\n{lower} ‚Üí {upper}"
        self.integral_display.config(text=display_text)
        
    def set_limit(self, limit):
        # Simple logic: if upper is empty, set upper; otherwise set lower
        if not self.upper_limit_var.get():
            self.upper_limit_var.set(limit)
        else:
            self.lower_limit_var.set(limit)
        self.update_integral_display()
    
    def clear_function(self):
        self.function_var.set("")
    
    def clear_all(self):
        self.function_var.set("")
        self.upper_limit_var.set("")
        self.lower_limit_var.set("")
        self.update_integral_display()
        self.ax.clear()
        self.canvas.draw()
        self.update_result_text("Campos limpiados. Listo para nueva integral.")
        self.status_var.set("Campos limpiados")
    
    def format_math_expression(self, expr_str):
        """Formatea la expresi√≥n para mejor visualizaci√≥n"""
        replacements = {
            '**': '^',
            '*': '',
            'sqrt': '‚àö',
            'exp': 'e^',
            'log': 'ln',
            'pi': 'œÄ',
            'sin': 'sen'
        }
        
        for key, value in replacements.items():
            expr_str = expr_str.replace(key, value)
            
        # Mejorar exponentes
        expr_str = re.sub(r'\^\((\d+)\)', r'^\1', expr_str)
        expr_str = re.sub(r'\^\((\w+)\)', r'^\1', expr_str)
        
        return expr_str
    
    def update_result_text(self, content):
        self.result_text.config(state=tk.NORMAL)
        self.result_text.delete(1.0, tk.END)
        self.result_text.insert(tk.END, content)
        self.result_text.config(state=tk.DISABLED)
    
    def calculate_and_plot(self):
        self.status_var.set("Calculando...")
        self.root.update()
        
        try:
            # Obtener valores
            function_str = self.function_var.get()
            upper_limit_str = self.upper_limit_var.get()
            lower_limit_str = self.lower_limit_var.get()
            
            if not all([function_str, upper_limit_str, lower_limit_str]):
                messagebox.showerror("Error", "Por favor completa todos los campos")
                self.status_var.set("Error: Campos incompletos")
                return
            
            # Crear s√≠mbolo
            x = symbols('x')
            
            # Convertir strings a expresiones de sympy
            function_expr = sympify(function_str.replace('^', '**'))
            upper_limit = float(sympify(upper_limit_str).evalf())
            lower_limit = float(sympify(lower_limit_str).evalf())
            
            if lower_limit >= upper_limit:
                messagebox.showerror("Error", "El l√≠mite inferior debe ser menor que el superior")
                self.status_var.set("Error: L√≠mites incorrectos")
                return
            
            # Calcular la integral
            integral_result = integrate(function_expr, (x, lower_limit, upper_limit))
            integral_value = float(integral_result.evalf())
            
            # Crear funci√≥n para graficar
            func_lambdified = lambdify(x, function_expr, 'numpy')
            
            # Limpiar el gr√°fico anterior
            self.ax.clear()
            
            # Crear puntos para la gr√°fica
            range_extension = (upper_limit - lower_limit) * 0.2
            x_min = min(lower_limit, upper_limit) - range_extension
            x_max = max(lower_limit, upper_limit) + range_extension
            
            x_vals = np.linspace(x_min, x_max, 1000)
            y_vals = func_lambdified(x_vals)
            
            # Graficar la funci√≥n
            self.ax.plot(x_vals, y_vals, 'cyan', linewidth=2.5, 
                        label=f'f(x) = {self.format_math_expression(function_str)}')
            
            # Rellenar el √°rea bajo la curva
            x_fill = np.linspace(lower_limit, upper_limit, 500)
            y_fill = func_lambdified(x_fill)
            self.ax.fill_between(x_fill, y_fill, alpha=0.4, color='#3498db', 
                               label=f'√Årea = {integral_value:.4f}')
            
            # L√≠neas verticales en los l√≠mites
            self.ax.axvline(x=lower_limit, color='#e74c3c', linestyle='--', linewidth=2, alpha=0.9)
            self.ax.axvline(x=upper_limit, color='#e74c3c', linestyle='--', linewidth=2, alpha=0.9)
            
            # Punto de intersecci√≥n con el eje x (si existe)
            x_intersect = np.linspace(lower_limit, upper_limit, 100)
            y_intersect = func_lambdified(x_intersect)
            self.ax.plot(x_intersect, np.zeros_like(x_intersect), 'white', alpha=0.3)
            
            # Configurar el gr√°fico
            self.ax.set_xlabel('x', fontsize=10)
            self.ax.set_ylabel('f(x)', fontsize=10)
            
            # T√≠tulo con expresi√≥n matem√°tica formateada
            func_display = self.format_math_expression(function_str)
            title = f"‚à´  {func_display}  dx = {integral_value:.4f}\nL√≠mites: [{lower_limit:.2f} ‚Üí {upper_limit:.2f}]"
            self.ax.set_title(title, fontsize=12, pad=15)
            
            self.ax.grid(True, alpha=0.2, linestyle='--')
            self.ax.legend(loc='upper right', framealpha=0.3)
            
            # Actualizar el canvas
            self.canvas.draw()
            
            # Mostrar resultados en la pesta√±a de texto
            result_content = f"=== RESULTADOS DE LA INTEGRAL ===\n\n"
            result_content += f"Funci√≥n: f(x) = {self.format_math_expression(function_str)}\n"
            result_content += f"L√≠mite inferior: {lower_limit}\n"
            result_content += f"L√≠mite superior: {upper_limit}\n\n"
            result_content += f"Resultado simb√≥lico: {integral_result}\n"
            result_content += f"Resultado num√©rico: {integral_value:.6f}\n\n"
            result_content += f"=== AN√ÅLISIS ===\n\n"
            
            # A√±adir interpretaci√≥n del resultado
            if integral_value > 0:
                result_content += "El √°rea bajo la curva es positiva, lo que indica que la funci√≥n "
                result_content += "est√° por encima del eje x en el intervalo dado.\n"
            elif integral_value < 0:
                result_content += "El √°rea bajo la curva es negativa, lo que indica que la funci√≥n "
                result_content += "est√° por debajo del eje x en el intervalo dado.\n"
            else:
                result_content += "El √°rea neta es cero, lo que indica que las √°reas positiva y negativa "
                result_content += "se cancelan exactamente en este intervalo.\n"
                
            # A√±adir al historial
            history_entry = {
                'function': function_str,
                'lower': lower_limit,
                'upper': upper_limit,
                'result': integral_value,
                'symbolic': str(integral_result)
            }
            self.history.append(history_entry)
            
            self.update_result_text(result_content)
            self.notebook.select(1)  # Mostrar pesta√±a de resultados
            
            self.status_var.set(f"C√°lculo completado. Resultado: {integral_value:.4f}")
            
        except Exception as e:
            error_msg = f"Error al calcular la integral: {str(e)}"
            messagebox.showerror("Error", error_msg)
            self.status_var.set(f"Error: {str(e)[:50]}...")
    
    def show_examples(self):
        examples = """
        Ejemplos de integrales para probar:
        
        1. Integral de una constante:
           Funci√≥n: 2
           L√≠mite inferior: 0
           L√≠mite superior: 5
           
        2. Integral lineal:
           Funci√≥n: 3*x
           L√≠mite inferior: 1
           L√≠mite superior: 4
           
        3. Integral cuadr√°tica:
           Funci√≥n: x^2
           L√≠mite inferior: 0
           L√≠mite superior: 3
           
        4. Integral trigonom√©trica:
           Funci√≥n: sin(x)
           L√≠mite inferior: 0
           L√≠mite superior: œÄ
           (Usar 'pi' para œÄ)
           
        5. Integral exponencial:
           Funci√≥n: e^x
           L√≠mite inferior: 0
           L√≠mite superior: 1
        """
        self.update_result_text(examples)
        self.notebook.select(1)  # Mostrar pesta√±a de resultados
        self.status_var.set("Ejemplos mostrados")
    
    def show_history(self):
        if not self.history:
            self.update_result_text("El historial est√° vac√≠o.")
            self.notebook.select(1)
            return
            
        # Crear contenido del historial
        hist_content = "=== HISTORIAL DE C√ÅLCULOS ===\n\n"
        for i, entry in enumerate(self.history, 1):
            hist_content += f"{i}. ‚à´ {self.format_math_expression(entry['function'])} dx "
            hist_content += f"de {entry['lower']} a {entry['upper']}\n"
            hist_content += f"   Resultado: {entry['result']:.4f}\n"
            hist_content += f"   Expresi√≥n simb√≥lica: {entry['symbolic']}\n\n"
        
        self.update_result_text(hist_content)
        self.notebook.select(1)  # Mostrar pesta√±a de resultados
        self.status_var.set(f"Mostrando {len(self.history)} c√°lculos hist√≥ricos")
    
    def toggle_theme(self):
        if self.dark_mode:
            # Cambiar a modo claro
            self.style.configure('.', background="#ecf0f1", foreground="#2c3e50")
            self.style.configure('TFrame', background="#ecf0f1")
            self.style.configure('TLabel', background="#ecf0f1", foreground="#2c3e50")
            self.style.configure('TLabelframe', background="#d6dbdf", foreground="#2c3e50")
            self.style.configure('TLabelframe.Label', background="#d6dbdf", foreground="#2c3e50")
            self.root.configure(bg="#ecf0f1")
            self.integral_display.config(background="#d6dbdf")
            self.result_text.config(bg="#ffffff", fg="#2c3e50")
            plt.style.use('default')
            self.fig.set_facecolor("#ffffff")
            self.ax.set_facecolor("#f0f3f7")
            self.dark_mode = False
            self.status_var.set("Tema cambiado a claro")
        else:
            # Cambiar a modo oscuro
            self.style.configure('.', background="#2c3e50", foreground="#ecf0f1")
            self.style.configure('TFrame', background="#2c3e50")
            self.style.configure('TLabel', background="#2c3e50", foreground="#ecf0f1")
            self.style.configure('TLabelframe', background="#34495e", foreground="#ecf0f1")
            self.style.configure('TLabelframe.Label', background="#34495e", foreground="#ecf0f1")
            self.root.configure(bg="#2c3e50")
            self.integral_display.config(background="#34495e")
            self.result_text.config(bg="#34495e", fg="#ecf0f1")
            plt.style.use('dark_background')
            self.fig.set_facecolor("#2c3e50")
            self.ax.set_facecolor("#34495e")
            self.dark_mode = True
            self.status_var.set("Tema cambiado a oscuro")
        
        self.canvas.draw()
    
    def show_help(self):
        help_text = """
        IntegralMaster Pro - Ayuda
        
        C√ìMO USAR:
        1. Construye tu funci√≥n usando los botones de funciones, operaciones y constantes
        2. Establece los l√≠mites de integraci√≥n (inferior y superior)
        3. Haz clic en 'Calcular' para ver el resultado y la gr√°fica
        
        CARACTER√çSTICAS:
        - Visualizaci√≥n del √°rea bajo la curva
        - Resultados num√©ricos y simb√≥licos
        - Historial de c√°lculos
        - Temas claro/oscuro
        - Ejemplos predefinidos
        
        TIPS:
        - Usa '^' para exponentes (ej: x^2)
        - Usa 'sqrt' para ra√≠z cuadrada
        - Usa 'pi' para el n√∫mero œÄ
        - Usa 'e' para la constante de Euler
        - Puedes teclear directamente en los campos de funci√≥n y l√≠mites
        - Presiona Enter en cualquier campo para calcular autom√°ticamente
        
        Para m√°s informaci√≥n sobre c√°lculo integral, visita:
        https://es.wikipedia.org/wiki/Integral
        """
        self.update_result_text(help_text)
        self.notebook.select(1)
        self.status_var.set("Ayuda mostrada")

def main():
    root = tk.Tk()
    app = IntegralMasterPro(root)
    root.mainloop()

if __name__ == "__main__":
    main()